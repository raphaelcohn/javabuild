# This file is part of javabuild. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/javabuild/master/COPYRIGHT. No part of javabuild, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2014-2015 The developers of javabuild. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/javabuild/master/COPYRIGHT.


core_dependency_requires '*' rm mkdir
_javabuild_remakePath()
{
	local path="$1"
	rm -rf "$path"
	mkdir -m 0755 -p "$path"
}

javabuild_initialise()
{
	unset CLASSPATH
	javabuild_debugging=true
	javabuild_warningsAreErrors=false
	javabuild_sourceRelease='1.8'
	javabuild_targetRelease='1.8'
}

javabuild_createTemporaryLocations()
{
	local TMP_FOLDER
	core_temporaryFiles_newFolderToRemoveOnExit
	javabuild_emptyFolderPath="$TMP_FOLDER"
	
	core_temporaryFiles_newFolderToRemoveOnExit
	javabuild_modulesFolderPath="$TMP_FOLDER"
	
	local TMP_FILE
	core_temporaryFiles_newFileToRemoveOnExit
	javabuild_scratchFilePath="$TMP_FILE"
	
	core_temporaryFiles_newFileToRemoveOnExit
	javabuild_moduleDependencyFilePath="$TMP_FILE"
	
	core_temporaryFiles_newFileToRemoveOnExit
	javabuild_libraryDependencyFilePath="$TMP_FILE"
	
	core_temporaryFiles_newFileToRemoveOnExit
	javabuild_argumentsFilePath="$TMP_FILE"
}

javabuild_clean()
{
	_javabuild_remakePath "$javabuild_outputPath"
}

core_dependency_requires '*' grep sed
javabuild_findModules()
{
	local isEmpty
    if core_variable_array_isEmpty javabuild_moduleNames; then
		isEmpty=true
	else
		isEmpty=false
	fi
	
	grep '<module ' "$javabuild_projectPath"/.idea/modules.xml | sed -e 's;^.* filepath="\([^ ]*\)".*;\1;g' -e 's;\$PROJECT_DIR\$;'"$javabuild_projectPath"';g' >"$javabuild_scratchFilePath"
	
	while IFS= read -r moduleImlFilePath
	do
		if ! core_path_isReadableNonEmptyFilePath "$moduleImlFilePath"; then
			core_exitError $core_commandLine_exitCode_CONFIG "The module '$moduleName' has no module file at '$moduleImlFilePath'"
		fi
		local fileName="${moduleImlFilePath##*/}"
	    local moduleName="${fileName%.*}"

	    if $isEmpty; then
			core_variable_array_append javabuild_moduleNames "$moduleName"
		fi
		
		printf '%s' "$moduleImlFilePath" >"$javabuild_modulesFolderPath"/"$moduleName"
	done <"$javabuild_scratchFilePath"
}

core_dependency_requires '*' grep awk
_javabuild_addModuleDependencies()
{
	core_variable_array_initialise moduleNameDependencies
	grep '<orderEntry type="module" module-name="' "$moduleImlFilePath" | awk -F '"' '{print $4}' >"$javabuild_moduleDependencyFilePath"
	
	local moduleNameDependency
	while IFS= read -r moduleNameDependency
	do
		core_variable_array_append moduleNameDependencies "$moduleNameDependency"
	done <"$javabuild_moduleDependencyFilePath"
}

core_dependency_requires '*' grep awk
_javabuild_addLibraryDependencies()
{
	core_variable_array_initialise libraryNameDependencies
	
	grep '<orderEntry type="library" name="' "$moduleImlFilePath" | awk -F '"' '{print $4}' >"$javabuild_libraryDependencyFilePath"
	
	local libraryNameDependency
	while IFS= read -r libraryNameDependency
	do
		core_variable_array_append libraryNameDependencies "$libraryNameDependency"
	done <"$javabuild_libraryDependencyFilePath"
}

# https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html
core_dependency_requires '*' mkdir tr find sed cat
javabuild_crossCompileModule()
{
	local moduleName="$1"
	
	local destinationModuleFolderPath="$javabuild_outputPath"/"$moduleName"
	
	local alreadyBuiltFilePath="$destinationModuleFolderPath"/.built
	if [ -f "$alreadyBuiltFilePath" ]; then
		return 0
	fi
	
	local moduleImlFilePath="$(cat "$javabuild_modulesFolderPath"/"$moduleName")"
	if ! core_path_isReadableNonEmptyFilePath "$moduleImlFilePath"; then
		core_exitError $core_commandLine_exitCode_CONFIG "The module '$moduleName' has no module file at '$moduleImlFilePath'"
	fi
	
	local moduleFolderPath="${moduleImlFilePath%/*}"
	
	local pathsWithTrailingColon="$(grep '<sourceFolder ' "$moduleImlFilePath" | sed -e 's;^.* url="\([^ ]*\)".*;\1;g' -e 's;file://\$MODULE_DIR\$;'"$moduleFolderPath"';g' | tr '\n' ':')"
	local moduleSourceFolderPath="${pathsWithTrailingColon%%:}"
		
	local buildingFilePath="$destinationModuleFolderPath"/.building
	if [ -f "$buildingFilePath" ]; then
		core_exitError $core_commandLine_exitCode_CONFIG "The module '$moduleName' is in a circular dependency chain"
	fi
	
	mkdir -m 0755 -p "$destinationModuleFolderPath"
	printf '' >"$buildingFilePath"
	
	local moduleSourcePathsArray
	local moduleSourcePathsArray_initialised
	core_variable_array_initialise moduleSourcePathsArray
	
	local moduleLibraryPathsArray
	local moduleLibraryPathsArray_initialised
	core_variable_array_initialise moduleLibraryPathsArray
	
	local libraryNameDependencies
	local libraryNameDependencies_initialised
	_javabuild_addLibraryDependencies
	
	local moduleNameDependencies
	local moduleNameDependencies_initialised
	_javabuild_addModuleDependencies
	
	_javabuild_crossCompileModule_iterateModuleDependencies()
	{
		local moduleNameDependency="$core_variable_array_element"
		if [ ! -f "$javabuild_outputPath"/"$moduleNameDependency"/.built ]; then
			javabuild_crossCompileModule "$moduleNameDependency"
		fi

		local path
		
		while IFS= read -r path
		do
			core_variable_array_appendUniquely moduleSourcePathsArray "$path"
		done <"$javabuild_modulesFolderPath"/"$moduleNameDependency".sources.path

		while IFS= read -r path
		do
			core_variable_array_appendUniquely moduleLibraryPathsArray "$path"
		done <"$javabuild_modulesFolderPath"/"$moduleNameDependency".libraries.path
		
		# module compiled classes
		core_variable_array_appendUniquely moduleLibraryPathsArray "$javabuild_outputPath"/"$moduleNameDependency"/classes

		# module source path(s)
		local x="$(cat "$javabuild_modulesFolderPath"/"$moduleNameDependency")"
		core_variable_array_appendUniquely moduleSourcePathsArray "${x%/*}"
		
		# module generated sources
		core_variable_array_appendUniquely moduleSourcePathsArray "$javabuild_outputPath"/"$moduleNameDependency"/generated-sources
	}
	core_variable_array_iterate moduleNameDependencies _javabuild_crossCompileModule_iterateModuleDependencies
	
	_javabuild_crossCompileModule_iterateLibraryDependencies()
	{
		local libraryNameDependency="$core_variable_array_element"
		
		local libraryXmlFileBaseName="$(printf '%s' "$libraryNameDependency" | tr '-' '_' )"
		local libraryXmlFilePath="$javabuild_projectPath"/.idea/libraries/"$libraryXmlFileBaseName".xml
		if ! core_path_isReadableNonEmptyFilePath "$libraryXmlFilePath"; then
			core_exitError $core_commandLine_exitCode_CONFIG "The library '$libraryNameDependency' has no library file at '$libraryXmlFilePath'"
		fi
		
		local xxx="$(tr -d ' \n' <"$libraryXmlFilePath")"
		local strippedOfLeft="${xxx#*<CLASSES>}"
		local strippedOfRight="${strippedOfLeft%</CLASSES>*}"
		printf '%s' "$strippedOfRight$strippedOfRight" | sed -e 's;^<rooturl\=";;g' -e 's;"/>$;;g' -e 's;"/><rooturl=";\n;g' -e 's;\.jar!/;.jar;g' >"$javabuild_moduleDependencyFilePath"
		
		local libraryFilePath
		while IFS= read -r libraryFilePath
		do	
			# Does it start with 'jar:?'
			case "$libraryFilePath" in
				
				jar:*)
					local strippedFront="${libraryFilePath#jar://\$PROJECT_DIR\$*}"
					local path="${javabuild_projectPath}${strippedFront}"
					if [ ! -s "$path" ]; then
						core_exitError $core_commandLine_exitCode_CONFIG "The library '$libraryNameDependency' has no library JAR at '$path'"
					fi

					core_variable_array_appendUniquely moduleLibraryPathsArray "$path"
				;;
				
				*)
					core_exitError $core_commandLine_exitCode_SOFTWARE "Can not handle library file path '$libraryFilePath'"
				;;
				
			esac
			
		done <"$javabuild_moduleDependencyFilePath"
	}
	core_variable_array_iterate libraryNameDependencies _javabuild_crossCompileModule_iterateLibraryDependencies
	
	
	local moduleLibraryPaths="$(core_variable_array_string moduleLibraryPathsArray ':')"
	
	printf '' >"$javabuild_modulesFolderPath"/"$moduleName".libraries.path
	_javabuild_crossCompileModule_writeLibraryDependencies()
	{
		local path="$core_variable_array_element"
		printf '%s\n' "$path" >>"$javabuild_modulesFolderPath"/"$moduleName".libraries.path
	}
	core_variable_array_iterate moduleLibraryPathsArray _javabuild_crossCompileModule_writeLibraryDependencies
	
	
	local moduleSourcePaths="$(core_variable_array_string moduleSourcePathsArray ':')"
	
	printf '' >"$javabuild_modulesFolderPath"/"$moduleName".sources.path
	_javabuild_crossCompileModule_writeSourcesDependencies()
	{
		local path="$core_variable_array_element"
		printf '%s\n' "$path" >>"$javabuild_modulesFolderPath"/"$moduleName".sources.path
	}
	core_variable_array_iterate moduleSourcePathsArray _javabuild_crossCompileModule_writeSourcesDependencies
	
	
	local destinationClassFilesFolderPath="$javabuild_outputPath"/"$moduleName"/classes
	mkdir -m 0755 -p "$destinationClassFilesFolderPath"
	
	local destinationGeneratedSourceFilesFolderPath="$javabuild_outputPath"/"$moduleName"/generated-sources
	mkdir -m 0755 -p "$destinationGeneratedSourceFilesFolderPath"
	
	set -- -encoding 'UTF-8' -implicit:class -parameters -proc:none \
		-source "$javabuild_sourceRelease" -target "$javabuild_targetRelease" \
		-classpath "$moduleLibraryPaths" -sourcepath "$moduleSourcePaths" -s "$destinationGeneratedSourceFilesFolderPath" -d "$destinationClassFilesFolderPath" \
		-Xprefer:source \
		-Xpkginfo:always
	
	if $javabuild_debugging; then
		set -- "$@" -g
	fi
	
	if [ $(core_init_verbosity) -gt 1 ]; then
		set -- "$@" -verbose
	fi
	
	if $javabuild_warningsAreErrors; then
		set -- "$@" -werror
	else
		set -- "$@" -nowarn -Xlint:none
	fi
	find -L "$moduleSourceFolderPath" -type 'f' -name '*.java' >"$javabuild_argumentsFilePath"
	
	core_message NOTICE "Compiling module '$moduleName'"
	javac "$@" '@'"$javabuild_argumentsFilePath"
	
	rm "$buildingFilePath"
	printf '' >"$alreadyBuiltFilePath"
}
